/*  ---- MAP INDEXS ---- */
/*
|        |*| = Grass
|        |@| = Player Spawn
|        |!| = NPC Spawn
|        |+| = Rock
|        |?  | = Tree --- offest = 2
|        |~| = Water
|        |X| = House
|        |#| = Wall


*/

namespace ConsoleGame
{
    using System.Text;
    using SpriteList = List<Tuple<Sprite, int, int>>;

    // Map class made of indexes 
    public class Map
    {
        private string[] _mapLoaded =
            {
                "?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ",
                "   *********************************************.......***********   ",
                "   *********************************************.......***********   ",
                "   *********************************************.......***********   ",
                "   *********************************************.......***********   ",
                "?  *******************************************.......*************?  ",
                "   *******************************************.........***********   ",
                "   *******************************************.........***********   ",
                "   ******************************************..........***********   ",
                "   ******************************************...........**********   ",
                "?  ******************************************........*************?  ",
                "   *******************************************........************   ",
                "   *****************************************..........************   ",
                "   *****************************************..........************   ",
                "   *****************************************..........************   ",
                "?  **************************************...........**************?  ",
                "   *****************************************.........*************   ",
                "   *****************************************.........*************   ",
                "   ****************************************..........*************   ",
                "   *****************************************...........***********   ",
                "?  ******************************************..........***********?  ",
                "   *********************************************...........*******   ",
                "   **********************************************..........*******   ",
                "   **********************************************..........*******   ",
                "   *********************************************............******   ",
                "?  **************************##########***###******........*******?  ",
                "****************************##~~~~~~~~#####~########.........*****   ",
                "***************************##~~~~~~~~~~~~~~~~~~~~~~~##**.............",
                " *************************#~~~~~~~~~~~~~~~~~~~~~~~~~~#***............",
                "#################********#~~~~~~~~~~~~~~~~~~~~~~~~~##****............",
                "****************#********#~~~~~~~~~~~~~~~~~~~~~~~~#*******...........",
                "~~~~~~~~~~~~~~~~##*******#~~~~~~~~~~~~~~~~~~~~~~~~##*****............",
                "~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~~~~~#*********.........",
                "~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~~~~~#*********.........",
                "~~~~~~~~~~~~~~~~~#########~~~~~~~~~~~~~~~~~~~~~~~~#*********.........",
                "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#******************",
                "#############~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#******************",
                "*************###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##*******************",
                "?  ************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##****************?  ",
                " ***************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#****************   ",
                " ***************#########~~~~~~~~~~~~~~~~~~~~~~~~#****************   ",
                " ***********************##~~~~~~~~~~~~~~~~~~~~~~~#****************   ",
                " ************************####~~~~~~~~~~~~~~~~~~~~#************....   ",
                "?  ************************##~~~~~~~~~~~~~~~~~~~#***********....**?  ",
                "****************************#~~~~~~~~~~~~~~~~~~~#************....*   ",
                "****************************#~~~~~~~~~~~~~~~~~~##*********.......*   ",
                "****************************##~~~####~~~~#######**********.......*   ",
                "*****************************##~##**######*************.........**   ",
                "?  ***************************###**********************........***?  ",
                "*******************............*****........*****..............***   ",
                "******************...........................................*****   ",
                "****************.............................................*****   ",
                "***************..............................................*****   ",
                "?**************............................................*******?  ",
                "************...............................................*******   ",
                "************.........******...........************.........*******   ",
                "**********...........*********************************************   ",
                "**********...........*********************************************   ",
                "?*********...........*********************************************?  ",
                "**********........************************************************   ",
                "*********.........************************************************   ",
                "*********.......**************************************************   ",
                "*********.......**************************************************   ",
                "?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  "
            };
        private string[]? _imageMap;  // create a new string array for letters map
        private SpriteList _spriteList = new SpriteList(); // list of sprites

        
        public SpriteList GetSprites() { return _spriteList; } // Get the Sprites of the map
       
        public string[] GetImageMap() { return _imageMap; }  // Get the chars of the map



        public void Load()
        {
            _imageMap = new string[_mapLoaded.Length];

            // create a temp 2d array of chars 
            char[,] _temp = new char[_mapLoaded.Length, _mapLoaded[0].Length + 1];

            // Sprites
            Sprite player = Sprite.GetSprite("WARRIOR");
            Sprite tree = Sprite.GetSprite("Tree");

            // Double for loop go through  _mapLoaded -> add sprites to the list --- add characters to _imageMap
            for (int row = 0; row < _mapLoaded.Length; row++)
            {
                for (int column = 0; column < _mapLoaded[0].Length; column++)
                {
                    switch (_mapLoaded[row][column])
                    {
                        // if index is a tree
                        case '?':
                            _spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("Tree"), column, row));
                            break;

                        // if index is a grass
                        case '*':
                            _temp[row, column] = '#';
                            break;

                        // if index is a rock
                        case '+':
                            _temp[row, column] = '+';
                            break;

                        // if index is water
                        case '~':
                            _temp[row, column] = '░';
                            break;

                        // if index is a wall
                        case '#':
                            _temp[row, column] = '█';
                            break;

                        // if index is a house
                        case 'X':
                            _spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("House"), column, row));
                            break;

                        // if index is a player spawn
                        case '@':
                            _spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("WARRIOR"), column, row));
                            break;

                        // if index is a npc spawn
                        case '!':
                            _temp[row, column] = '!';
                            break;

                        // if nothing is there
                        case '.':
                            _temp[row, column] = ' ';
                            break;
                    }
                }
            }
            // Sending _temp to _imageMap
            for (int i = 0; i < _mapLoaded.Length; i++) // _mapLoaded for number of lines
            {
                for (int j = 0; j < _mapLoaded[0].Length; j++)
                {
                    _imageMap[i] += _temp[i, j];
                    _imageMap[i] += _temp[i, j];
                }
            }
        }

        public static bool IsCollidable(char tileType)
        {
            switch (tileType)
            {
                case '█':
                    return true;
                case '?':
                    return true;
                case 'X':
                    return true;

                default:
                    return false;
            }
        }

        public bool IsCollidable(int x, int y)
        {
            return IsCollidable(_imageMap[y][x * 2]);
        }
    }
}






// FileStream file = File.open("save.txt", FileMode.Open);