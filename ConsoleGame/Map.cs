/*  ---- _map INDEXS ---- */
/*
|        |*| = Grass
|        |@| = Player Spawn
|        |!| = NPC Spawn
|        |+| = Rock
|        |?  | = Tree --- offest = 2
|        |~| = Water
|        |X| = House
|        |#| = Wall


*/

// generate a _map in form of a string with the above indexs



namespace ConsoleGame
{
	using System.Text;
	using SpriteList = List<Tuple<Sprite, int, int>>;

	// _map class made of indexes 
	class Map
	{
		public static void LoadMap(out SpriteList _spriteList, out string[] _imageMap)
		{
			// create a new char _map
			string[] _mapLoaded =
			{
				"?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ",
				"   *********************************************.......***********   ",
				"   *********************************************.......***********   ",
				"   *********************************************.......***********   ",
				"   *********************************************.......***********   ",
				"?  *******************************************.......*************?  ",
				"   *******************************************.........***********   ",
				"   *******************************************.........***********   ",
				"   ******************************************..........***********   ",
				"   ******************************************...........**********   ",
				"?  ******************************************........*************?  ",
				"   *******************************************........************   ",
				"   *****************************************..........************   ",
				"   *****************************************..........************   ",
				"   *****************************************..........************   ",
				"?  **************************************...........**************?  ",
				"   *****************************************.........*************   ",
				"   *****************************************.........*************   ",
				"   ****************************************..........*************   ",
				"   *****************************************...........***********   ",
				"?  ******************************************..........***********?  ",
				"   *********************************************...........*******   ",
				"   **********************************************..........*******   ",
				"   **********************************************..........*******   ",
				"   *********************************************............******   ",
				"?  **************************##########***###******........*******?  ",
				"****************************##~~~~~~~~#####~########.........*****   ",
				"***************************##~~~~~~~~~~~~~~~~~~~~~~~##**.............",
				" *************************#~~~~~~~~~~~~~~~~~~~~~~~~~~#***............",
				"#################********#~~~~~~~~~~~~~~~~~~~~~~~~~##****............",
				"****************#********#~~~~~~~~~~~~~~~~~~~~~~~~#*******...........",
				"~~~~~~~~~~~~~~~~##*******#~~~~~~~~~~~~~~~~~~~~~~~~##*****............",
				"~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~~~~~#*********.........",
				"~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~~~~~#*********.........",
				"~~~~~~~~~~~~~~~~~#########~~~~~~~~~~~~~~~~~~~~~~~~#*********.........",
				"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#******************",
				"#############~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#******************",
				"*************###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##*******************",
				"?  ************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##****************?  ",
				" ***************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#****************   ",
				" ***************#########~~~~~~~~~~~~~~~~~~~~~~~~#****************   ",
				" ***********************##~~~~~~~~~~~~~~~~~~~~~~~#****************   ",
				" ************************####~~~~~~~~~~~~~~~~~~~~#************....   ",
				"?  ************************##~~~~~~~~~~~~~~~~~~~#***********....**?  ",
				"****************************#~~~~~~~~~~~~~~~~~~~#************....*   ",
				"****************************#~~~~~~~~~~~~~~~~~~##*********.......*   ",
				"****************************##~~~####~~~~#######**********.......*   ",
				"*****************************##~##**######*************.........**   ",
				"?  ***************************###**********************........***?  ",
				"*******************............*****........*****..............***   ",
				"******************...........................................*****   ",
				"****************.............................................*****   ",
				"***************..............................................*****   ",
				"?**************............................................*******?  ",
				"************...............................................*******   ",
				"************.........******...........************.........*******   ",
				"**********...........*********************************************   ",
				"**********...........*********************************************   ",
				"?*********...........*********************************************?  ",
				"**********........************************************************   ",
				"*********.........************************************************   ",
				"*********.......**************************************************   ",
				"*********.......**************************************************   ",
				"?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  "
			};

			// create a temp 2d array of chars 
			char[,] _temp = new char[_mapLoaded.Length, _mapLoaded[0].Length + 1];
		

			_imageMap = new string[_mapLoaded.Length];  // create a new string array for letters map
			_spriteList = new SpriteList(); // list of sprites

			// Sprites
			Sprite player = Sprite.GetSprite("WARRIOR");
			Sprite tree = Sprite.GetSprite("Tree");

			// Double for loop go through  _mapLoaded -> add sprites to the list --- add characters to _imageMap
			for (int row = 0; row < _mapLoaded.Length; row++)
			{
				for (int column = 0; column < _mapLoaded[0].Length; column++)
				{
					switch (_mapLoaded[row][column])
					{
						// if index is a tree
						case '?':
							_spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("Tree"), column, row));
							break;

						// if index is a grass
						case '*':
							_temp[row, column] = '#';
							break;

						// if index is a rock
						case '+':
							_temp[row, column] = '+';
							break;

						// if index is water
						case '~':
							_temp[row, column] = '░';
							break;

						// if index is a wall
						case '#':
							_temp[row, column] = '█';
							break;

						// if index is a house
						case 'X':
							_spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("House"), column, row));
							break;

						// if index is a player spawn
						case '@':
							_spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("WARRIOR"), column, row));
							break;

						// if index is a npc spawn
						case '!':
							_temp[row, column] = '!';
							break;

						// if nothing is there
						case '.':
							_temp[row, column] = ' ';
							break;
					}
				}
			}
			// Sending _temp to _imageMap
			for (int i = 0; i < _mapLoaded.Length; i++) // _mapLoaded for number of lines
			{
				for (int j = 0; j < _mapLoaded[0].Length; j++)
				{
					_imageMap[i] += _temp[i, j];
					_imageMap[i] += _temp[i, j];
				}
			}
		}
	}
}






// FileStream file = File.open("save.txt", FileMode.Open);