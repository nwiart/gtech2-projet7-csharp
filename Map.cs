/*  ---- _map INDEXS ---- */
/*
|        |*| = Grass
|        |@| = Player Spawn
|        |!| = NPC Spawn
|        |+| = Rock
|        |?| = Tree
|        |~| = Water
|        |X| = House
|        |#| = Wall


*/

// generate a _map in form of a string with the above indexs



namespace ConsoleGame
{
    // _map class made of indexes 
    class _map
    {
        public static string LoadMap()
        {
            // create a new char _map
            string[] _mapLoaded = new[]
            {
                "?????????????????????????????????????????????       ????????????.",
                "?********************************************       ***********?.",
                "?********************************************       ***********?.",
                "?********************************************       ***********?.",
                "?********************************************       ***********?.",
                "?*******************************************        ***********?.",
                "?******************************************         ***********?.",
                "?******************************************         ***********?.",
                "?******************************************         ***********?.",
                "?******************************************         ***********?.",
                "?******************************************        ************?.",
                "?******************************************        ************?.",
                "?*****************************************         ************?.",
                "?****************************************          ************?.",
                "?****************************************          ************?.",
                "?****************************************          ************?.",
                "?****************************************         *************?.",
                "?****************************************         *************?.",
                "?****************************************         *************?.",
                "?****************************************           ***********?.",
                "?*****************************************          ***********?.",
                "?*********************************************          *******?.",
                "?*********************************************          *******?.",
                "?*********************************************          *******?.",
                "?**********************************************          ******?.",
                "?**************************##########***###*******        *****?.",
                "?*************************##~~~~~~~~#####~#####***        *****?.",
                "?************************##~~~~~~~~~~~~~~~~~~~##****            .",
                "?************************#~~~~~~~~~~~~~~~~~~~~~#*****           .",
                "#################********#~~~~~~~~~~~~~~~~~~~~~#*****           .",
                "~~~~~~~~~~~~~~~~##*******#~~~~~~~~~~~~~~~~~~~~##*****           .",
                "~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~#*******          .",
                "~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~#*******          .",
                "~~~~~~~~~~~~~~~~~#########~~~~~~~~~~~~~~~~~~~~#*******          .",
                "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#****************?.",
                "#############~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#****************?.",
                "?***********##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##***************?.",
                "?************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##***************?.",
                "?************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#****************?.",
                "?************#########~~~~~~~~~~~~~~~~~~~~~~~~#****************?.",
                "?********************##~~~~~~~~~~~~~~~~~~~~~~~#****************?.",
                "?*********************####~~~~~~~~~~~~~~~~~~~~#************     .",
                "?************************##~~~~~~~~~~~~~~~~~~~#************     .",
                "?*************************#~~~~~~~~~~~~~~~~~~~#************     .",
                "?*************************#~~~~~~~~~~~~~~~~~~##*********        .",
                "?*************************#~~~~~~~~~~~~~~~~~~#**********        .",
                "?*************************##~~~####~~~~#######**********        .",
                "?**************************##~##**######*************         *?.",
                "?***************************###**********************         *?.",
                "?****************            *****        *****              **?.",
                "?***************                                           ****?.",
                "?*************                                             ****?.",
                "?************                                              ****?.",
                "?************                                            ******?.",
                "?*********                                               ******?.",
                "?*********         ******           ************         ******?.",
                "?*******           ********************************************?.",
                "?*******           ********************************************?.",
                "?*******           ********************************************?.",
                "?*******      *************************************************?.",
                "?*******      *************************************************?.",
                "?*******      *************************************************?.",
                "?*******      *************************************************?.",
                "????????      ??????????????????????????????????????????????????"
            };



            string[] _spriteMap = new string[]
            {

            };

            string[] _imageMap = new string[]
            {

            };
            for (int row = 0; row < 500; row++)
            {
                for (int column = 0; column < 500; column++)
                {
                    if(_mapLoaded[row][column] == '.') // skip to next line
                    {
                        continue;
                    }
                    else if(_mapLoaded[row][column] == '?') // if index is a tree
                    {
                        _spriteMap[row][column] = "treesprite";
                    }
                    else if(_mapLoaded[row][column] == '*') // if index is a grass
                    {
                        _mapLoaded[row][column] = 'G';
                    }
                    else if(_mapLoaded[row][column] == '+') // if index is a rock
                    {
                        _mapLoaded[row][column] = 'R';
                    }
                    else if(_mapLoaded[row][column] == '~') // if index is water
                    {
                        _mapLoaded[row][column] = 'W';
                    }
                    else if(_mapLoaded[row][column] == '#') // if index is a wall
                    {
                        _mapLoaded[row][column] = 'W';
                    }
                    else if(_mapLoaded[row][column] == 'X') // if index is a house
                    {
                        _mapLoaded[row][column] = 'house';
                    }
                    else if(_mapLoaded[row][column] == '@') // if index is a player spawn
                    {
                        _mapLoaded[row][column] = 'player';
                    }
                    else if(_mapLoaded[row][column] == '!') // if index is a npc spawn
                    {
                        _mapLoaded[row][column] = 'N';
                    }
                    else if(_mapLoaded[row][column] == ' ') // if nothing is there
                    {
                        _mapLoaded[row][column] = ' ';
                    }
                }
            }
            return _mapLoaded;
        }
    }
}






