/*  ---- _map INDEXS ---- */
/*
|        |*| = Grass
|        |@| = Player Spawn
|        |!| = NPC Spawn
|        |+| = Rock
|        |?  | = Tree --- offest = 2
|        |~| = Water
|        |X| = House
|        |#| = Wall


*/

// generate a _map in form of a string with the above indexs



namespace ConsoleGame
{
    using System.Text;
    using SpriteList = List<Tuple<Sprite, int, int>>;

    // _map class made of indexes 
    class Map
    {
        SpriteList _spriteList = new SpriteList();
        public static void LoadMap(out SpriteList _spriteList, out string[] _imageMap)
        {
            // create a new char _map
            string[] _mapLoaded = new[]
            {
                "?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?   %",
                "   *********************************************.......************   %",
                "   *********************************************.......************   %",
                "   *********************************************.......************   %",
                "   *********************************************.......************   %",
                "?  *******************************************.......***********  ?   %",
                "   *******************************************.........************   %",
                "   *******************************************.........************   %",
                "   ******************************************..........************   %",
                "   ******************************************...........***********   %",
                "?  ******************************************........***********  ?   %",
                "   *******************************************........*************   %",
                "   *****************************************..........*************   %",
                "   *****************************************..........*************   %",
                "   *****************************************..........*************   %",
                "?  **************************************...........************  ?   %",
                "   *****************************************.........**************   %",
                "   *****************************************.........**************   %",
                "   ****************************************..........**************   %",
                "   *****************************************...........************   %",
                "?  ******************************************..........*********  ?   %",
                "   *********************************************...........********   %",
                "   **********************************************..........********   %",
                "   **********************************************..........********   %",
                "   *********************************************............*******   %",
                "?  **************************##########***###******........*****  ?   %",
                "****************************##~~~~~~~~#####~#######*.........*****    %",
                "***************************##~~~~~~~~~~~~~~~~~~~~~~~##**............  %",
                " *************************#~~~~~~~~~~~~~~~~~~~~~~~~~~#***...........  %",
                "#################********#~~~~~~~~~~~~~~~~~~~~~~~~~##****...........  %",
                "****************************#~~~~~~~~~~~~~~~~~~~~~#*******.......*    %",
                "~~~~~~~~~~~~~~~~##*******#~~~~~~~~~~~~~~~~~~~~~~~~##*****...........  %",
                "~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~~~~~#*********........  %",
                "~~~~~~~~~~~~~~~~~#*******#~~~~~~~~~~~~~~~~~~~~~~~~#*********........  %",
                "~~~~~~~~~~~~~~~~~#########~~~~~~~~~~~~~~~~~~~~~~~~#*********........  %",
                "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#***************    %",
                "#############~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#***************    %",
                "**************##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##****************    %",
                "?  ************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##**************  ?   %",
                " ***************#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#*****************   %",
                " ***************#########~~~~~~~~~~~~~~~~~~~~~~~~#*****************   %",
                " ***********************##~~~~~~~~~~~~~~~~~~~~~~~#*****************   %",
                " ************************####~~~~~~~~~~~~~~~~~~~~#************....*   %",
                "?  ************************##~~~~~~~~~~~~~~~~~~~#***********....  ?   %",
                "****************************#~~~~~~~~~~~~~~~~~~~#************....**   %",
                "****************************#~~~~~~~~~~~~~~~~~~##*********.......**   %",
                "****************************##~~~####~~~~#######**********.......**   %",
                "*****************************##~##**######*************.........***   %",
                "?  ***************************###**********************........*  ?   %",
                "*******************............*****........*****..............****   %",
                "******************...........................................******   %",
                "****************.............................................******   %",
                "***************..............................................******   %",
                "?**************............................................*****  ?   %",
                "************...............................................********   %",
                "************.........******...........************.........********   %",
                "**********...........**********************************************   %",
                "**********...........**********************************************   %",
                "?*********...........*******************************************  ?   %",
                "**********........*************************************************   %",
                "*********.........*************************************************   %",
                "*********.......***************************************************   %",
                "*********.......***************************************************   %",
                "?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?  ?    "
            };

            // create a temp 2d array of chars 
            char[,] _temp = new char[_mapLoaded.Length, _mapLoaded[0].Length];
            for (int i = 0; i < _mapLoaded.Length; i++)
            {
                for (int j = 0; j < _mapLoaded[0].Length; j++)
                {
                    _temp[i, j] = _mapLoaded[i][j];
                }

            }

            _imageMap = new string[_mapLoaded.Length];  // create a new string array for letters map
            _spriteList = new SpriteList(); // list of sprites

            // Sprites
            Sprite player = Sprite.GetSprite("WARRIOR");
            Sprite tree = Sprite.GetSprite("Tree");

            // Double for loop go through  _mapLoaded -> add sprites to the list --- add characters to _imageMap
            for (int row = 0; row < _mapLoaded.Length; row++)
            {
                for (int column = 0; column < _mapLoaded[0].Length; column++)
                {
                    if (_mapLoaded[row][column] == '%') // skip to next line
                    {
                        continue;
                    }
                    else if (_mapLoaded[row][column] == '?') // if index is a tree
                    {
                        _spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("Tree"), column, row));
                    }
                    else if (_mapLoaded[row][column] == '*') // if index is a grass
                    {
                        _temp[row, column] = '*';
                    }
                    else if (_mapLoaded[row][column] == '+') // if index is a rock
                    {
                        _temp[row, column] = '+';
                    }
                    else if (_mapLoaded[row][column] == '~') // if index is water
                    {
                        _temp[row, column] = '~';
                    }
                    else if (_mapLoaded[row][column] == '#') // if index is a wall
                    {
                        _temp[row, column] = '#';
                    }
                    else if (_mapLoaded[row][column] == 'X') // if index is a house
                    {
                        _spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("House"), column, row));
                    }
                    else if (_mapLoaded[row][column] == '@') // if index is a player spawn
                    {
                        _spriteList.Add(new Tuple<Sprite, int, int>(Sprite.GetSprite("WARRIOR"), column, row));
                    }
                    else if (_mapLoaded[row][column] == '!') // if index is a npc spawn
                    {
                        _temp[row, column] = '!';
                    }
                    else if (_mapLoaded[row][column] == '.') // if nothing is there
                    {
                        _temp[row, column] = ' ';
                    }
                }
            }
            // Sending _temp to _imageMap
            for (int i = 0; i < _mapLoaded.Length; i++) // _mapLoaded for number of lines
            {
                for (int j = 0; j < _temp.GetLength(0); j++)
                {
                    _imageMap[i] = _temp[i, j].ToString();
                }
            }
        }
    }
}






// FileStream file = File.open("save.txt", FileMode.Open);